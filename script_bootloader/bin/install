#!/bin/sh
#
# 此程序用于安装“华硕路由器开机自动运行程序系统”
#
########## CHECK ASUS ROUTER MODEL ##########
#
ROUTER_MODEL="$(nvram get model)"
#
########## END ##########
#
#
########## LOAD FUNCTIONS ##########
#
doubleCheckAndConfirm()
{
    while [ 1 ]
    do
        local VALUE_1
        local VALUE_2
        #
        echo -ne "($(basename $0)): $$ \033[1;44;37mINFO\033[0m: INPUT THE VALUE: "
        read VALUE_1
        echo -ne "($(basename $0)): $$ \033[1;44;37mINFO\033[0m: INPUT THE VALUE AGAIN TO CONFIRM: "
        read VALUE_2
        #
        if [ "${VALUE_1}" == "${VALUE_2}" ]
        then
            eval ${1}="${VALUE_1}"
            break
        else
            echo -e "($(basename $0)): $$ \033[1;43;31mNOTICE\033[0m: THE TWO VALUES ARE INCONSISTENT"
        fi
    done
}
#
########## END ##########
#
#
########## SET THE CUSTOM VARIABLES ##########
#
# 设置自定义变量
# 当该程序运行结束，此处设置的变量自动取消
#
# NAME OF THE SERVICE
# 服务名称
SERVICE_NAME="SCRIPTS-BOOTLOADER-FOR-ASUS-ROUTER"
#
# FUNCTION OF THE SERVICE
# 服务功能
SERVICE_FUNCTION="INSTALL"
#
# OPERATING_SYSTEM: Operating system of the ASUS Router
# 设置自定义变量OPERATING_SYSTEM为华硕路由器系统
OPERATING_SYSTEM="$(uname | sed -E 's/[[:upper:]]/\l&/g')"
#
# ROUTER_ARCHITECTURE: Architecture of the ASUS Router
# 设置自定义变量ROUTER_ARCHITECTURE为华硕路由器架构
case "$(uname -m)" in
    "aarch64")
        ROUTER_ARCHITECTURE="arm64"
        ;;
    "armv7l")
        ROUTER_ARCHITECTURE="arm"
        ;;
    "mips")
        ROUTER_ARCHITECTURE="mipsle"
        ;;
    *)
        # Do nothing but prompt the user
        # 如果路由器架构不符合上述三种情况，则执行
        echo -e "($(basename $0)): $$ \033[1;43;31mNOTICE\033[0m: ROUTER ARCHITECTURE IS UNKNOWN"
        #
        echo -e "($(basename $0)): $$ \033[1;41;37mFAILURE\033[0m: ${SERVICE_FUNCTION} ${SERVICE_NAME}"
        #
        exit 1
        ;;
esac
#
echo -e "($(basename $0)): $$ *--------- ${SERVICE_FUNCTION} ${SERVICE_NAME} ON ${ROUTER_MODEL} ---------*"
#
# USB_MOUNT_POINT: The mount point of the USB flash drive
# 设置自定义变量USB_MOUNT_POINT为U盘挂载点
USB_MOUNT_POINT_COUNT=$(find / -name 'script_bootloader' | wc -l)
#
case ${USB_MOUNT_POINT_COUNT} in
    0)
        echo -e "($(basename $0)): $$ \033[1;43;31mNOTICE\033[0m: UNABLE TO LOCATE DIRECTORY script_bootloader"
        echo -e "($(basename $0)): $$ \033[1;41;37mFAILURE\033[0m: ${SERVICE_FUNCTION} ${SERVICE_NAME}"
        #
        exit 1
        ;;
    1)
        USB_MOUNT_POINT="$(find / -name 'script_bootloader' | sed 's#/script_bootloader##')"
        ;;
    *)
        echo -e "($(basename $0)): $$ \033[1;43;31mNOTICE\033[0m: NUMBER OF DIRECTORY script_bootloader MUST BE ONE"
        echo -e "($(basename $0)): $$ \033[1;41;37mFAILURE\033[0m: ${SERVICE_FUNCTION} ${SERVICE_NAME}"
        #
        exit 2
        ;;
esac
#
# ENTWARE_BIN: The directory which contains all the common executable files installed by Entware
# 设置自定义变量ENTWARE_BIN为Entware安装的普通可执行文件目录
ENTWARE_BIN="${USB_MOUNT_POINT}/bin"
#
# SBL_SYS_ROOT: The root directory for SCRIPTS-BOOTLOADER-FOR-ASUS-ROUTER
# 设置自定义变量SBL_SYS_ROOT为SCRIPTS-BOOTLOADER-FOR-ASUS-ROUTER系统根目录
SBL_SYS_ROOT="${USB_MOUNT_POINT}/script_bootloader"
#
# SBL_SYS_BIN: The directory which contains all the executable files related to SCRIPTS-BOOTLOADER-FOR-ASUS-ROUTER
# 设置自定义变量SBL_SYS_BIN为SCRIPTS-BOOTLOADER-FOR-ASUS-ROUTER系统可执行文件目录
SBL_SYS_BIN="${SBL_SYS_ROOT}/bin"
#
# SBL_SYS_ETC: The directory which contains all the configuration files related to SCRIPTS-BOOTLOADER-FOR-ASUS-ROUTER
# 设置自定义变量SBL_SYS_ETC为SCRIPTS-BOOTLOADER-FOR-ASUS-ROUTER系统配置文件目录
SBL_SYS_ETC="${SBL_SYS_ROOT}/etc"
#
# SBL_SYS_TMP: The directory which contains all the temporary files related to SCRIPTS-BOOTLOADER-FOR-ASUS-ROUTER
# 设置自定义变量SBL_SYS_TMP为SCRIPTS-BOOTLOADER-FOR-ASUS-ROUTER系统临时文件目录
SBL_SYS_TMP="${SBL_SYS_ROOT}/tmp"
#
# SBL_SYS_USR: The directory which contains all the external software resources (add-ons) related to SCRIPTS-BOOTLOADER-FOR-ASUS-ROUTER
# 设置自定义变量SBL_SYS_USR为SCRIPTS-BOOTLOADER-FOR-ASUS-ROUTER系统外部软件资源目录，即插件目录
SBL_SYS_USR="${SBL_SYS_ROOT}/usr"
#
# SBL_SYS_VAR: The directory which contains all the variable files related to SCRIPTS-BOOTLOADER-FOR-ASUS-ROUTER
# 设置自定义变量SBL_SYS_VAR为SCRIPTS-BOOTLOADER-FOR-ASUS-ROUTER系统可变文件目录
SBL_SYS_VAR="${SBL_SYS_ROOT}/var"
#
# TEST_FMW_TEE: The value to show if tee exists in the firmware
# 设置自定义变量TEST_FMW_TEE为固件内tee命令的测试值
if [ -n "$(which tee)" ]
then
    TEST_FMW_TEE="false"
else
    TEST_FMW_TEE="true"
fi
#
########## END ##########
#
#
########## SAVE CREDENTIALS ##########
#
while [ 1 ]
do
    echo -e "($(basename $0)): $$ \033[1;44;37mINFO\033[0m: \033[4mUSERNAME\033[0m: login username of the router"
    doubleCheckAndConfirm ADMINUSER
    #
    echo -e "($(basename $0)): $$ \033[1;44;37mINFO\033[0m: \033[4mPASSWORD\033[0m: login password of the router"
    doubleCheckAndConfirm ADMINPASSWORD
    #
    if [ "${ADMINUSER}" != "$(nvram get http_username)" ]
    then
        echo -e "($(basename $0)): $$ \033[1;43;31mNOTICE\033[0m: INPUTS ARE NOT IDENTICAL TO THE INFORMATION SAVED IN THE ROUTER, PLEASE INPUT AGAIN"
    else
        echo -e "($(basename $0)): $$ \033[1;44;37mINFO\033[0m: \033[4mUSERNAME\033[0m: ${ADMINUSER}"
        echo -e "($(basename $0)): $$ \033[1;44;37mINFO\033[0m: \033[4mPASSWORD\033[0m: ${ADMINPASSWORD}"
        #
        echo -e "ADMINUSER=\"${ADMINUSER}\"" > "${SBL_SYS_ETC}/sbl_credentials"
        echo -e "ADMINPASSWORD=\"${ADMINPASSWORD}\"" >> "${SBL_SYS_ETC}/sbl_credentials"
        #
        break
    fi
done
#
########## END ##########
#
#
########## STAGE 1 ##########
#
echo -e "\033[1;45;37m############### STAGE 1: SET BOOT PARAMETERS ###############\033[0m"
#
sleep 10
#
# USB_MOUNT_SCRIPT: The script runs automatically when the USB flash drive is mounted
# 设置自定义变量USB_MOUNT_SCRIPT为U盘挂载时自动运行文件
USB_MOUNT_SCRIPT="${USB_MOUNT_POINT}/script_bootloader/bin/script_bootloader_usb_mount"
#
# USB_UMOUNT_SCRIPT: The script runs automatically when the USB flash drive is unmounted
# 设置自定义变量USB_UMOUNT_SCRIPT为U盘卸载时自动运行文件
USB_UMOUNT_SCRIPT="${USB_MOUNT_POINT}/script_bootloader/bin/script_bootloader_usb_umount"
#
# Check if ${USB_MOUNT_SCRIPT} and ${USB_UMOUNT_SCRIPT} exist
# 检查文件${USB_MOUNT_SCRIPT}和${USB_UMOUNT_SCRIPT}是否存在
if [ -e "${USB_MOUNT_SCRIPT}" ] && [ -e "${USB_UMOUNT_SCRIPT}" ]
then
    echo -e "($(basename $0)): $$ \033[1;44;37mINFO\033[0m: ALL THE PREREQUISITES ARE MET"
    #
    # Set nvram variable "script_usbmount" and "script_usbumount"
    # 如果两个文件都存在，则设置nvram变量script_usbmount和script_usbumount
    #
    # 使用nvram对变量script_usbmount进行设置。当U盘被挂载后，任何被该变量引用的可执行程序会自动执行
    nvram set script_usbmount="${USB_MOUNT_SCRIPT}"
    #
    # 使用nvram对变量script_usbumount进行设置。当U盘被卸载前，任何被该变量引用的可执行程序会自动执行
    nvram set script_usbumount="${USB_UMOUNT_SCRIPT}"
    #
    # Commit the changes
    # 使用nvram命令对路由器进行设置后，必须执行nvram commit命令，才能将已作出的修改保存至路由器
    nvram commit
    #
    if [ ${?} -eq 0 ]
    then
        echo -e "($(basename $0)): $$ \033[1;42;37mSUCCESS\033[0m: STAGE 1"
    else
        echo -e "($(basename $0)): $$ \033[1;41;37mFAILURE\033[0m: STAGE 1"
        #
        exit 3
    fi
    #
else
    # Stop and Exit
    # 如果两个文件不同时存在，则该程序终止
    echo -e "($(basename $0)): $$ \033[1;43;31mNOTICE\033[0m: NOT ALL THE PREREQUISITES ARE MET"
    echo -e "($(basename $0)): $$ \033[1;41;37mFAILURE\033[0m: STAGE 1"
    #
    exit 4
fi
#
########## END ##########
#
#
########## STAGE 2 ##########
#
echo -e "\033[1;45;37m############### STAGE 2: INSTALL ESSENTIAL COMPONENTS ###############\033[0m"
#
sleep 10
#
# Check if ${SBL_SYS_USR}/swap/bin/swap_install exists
# 检查文件${SBL_SYS_USR}/swap/bin/swap_install是否存在
if [ -e "${SBL_SYS_USR}/swap/bin/swap_install" ]
then
    # Invoke ${SBL_SYS_USR}/swap/bin/swap_install
    # 如果文件${SBL_SYS_USR}/swap/bin/swap_install存在，则执行
    "${SBL_SYS_USR}/swap/bin/swap_install"
    #
    # Check if ${SBL_SYS_USR}/swap/bin/swap_install returns 0
    # 检查文件${SBL_SYS_USR}/swap/bin/swap_install的返回值是否为0
    if [ ${?} -ne 0 ]
    then
        # Stop and Exit
        # 如果返回值不为0，则该程序终止
        echo -e "($(basename $0)): $$ \033[1;41;37mFAILURE\033[0m: STAGE 2"
        #
        exit 5
    fi
    #
else
    # Stop and Exit
    # 如果文件${SBL_SYS_USR}/swap/bin/swap_install不存在，则该程序终止
    echo -e "($(basename $0)): $$ \033[1;43;31mNOTICE\033[0m: CAN'T LOCATE ${SBL_SYS_USR}/swap/bin/swap_install"
    echo -e "($(basename $0)): $$ \033[1;41;37mFAILURE\033[0m: STAGE 2"
    #
    exit 6
fi
#
sleep 10
#
# Check if ${SBL_SYS_USR}/swap/bin/swap_enable.service exists
# 检查文件${SBL_SYS_USR}/swap/bin/swap_enable.service是否存在
if [ -e "${SBL_SYS_USR}/swap/bin/swap_enable.service" ]
then
    # Invoke ${SBL_SYS_USR}/swap/bin/swap_enable.service
    # 如果文件${SBL_SYS_USR}/swap/bin/swap_enable.service存在，则执行
    "${SBL_SYS_USR}/swap/bin/swap_enable.service"
    #
    # Check if ${SBL_SYS_USR}/swap/bin/swap_enable.service returns 0
    # 检查文件${SBL_SYS_USR}/swap/bin/swap_enable.service的返回值是否为0
    if [ ${?} -ne 0 ]
    then
        # Stop and Exit
        # 如果返回值不为0，则该程序终止
        echo -e "($(basename $0)): $$ \033[1;41;37mFAILURE\033[0m: STAGE 2"
        #
        exit 7
    fi
    #
else
    # Stop and Exit
    # 如果文件${SBL_SYS_USR}/swap/bin/swap_enable.service不存在，则该程序终止
    echo -e "($(basename $0)): $$ \033[1;43;31mNOTICE\033[0m: CAN'T LOCATE ${SBL_SYS_USR}/swap/bin/swap_enable.service"
    echo -e "($(basename $0)): $$ \033[1;41;37mFAILURE\033[0m: STAGE 2"
    #
    exit 8
fi
#
sleep 10
#
# Check if ${SBL_SYS_USR}/entware/bin/entware_install exists
# 检查文件${SBL_SYS_USR}/entware/bin/entware_install是否存在
if [ -e "${SBL_SYS_USR}/entware/bin/entware_install" ]
then
    # Invoke ${SBL_SYS_USR}/entware/bin/entware_install
    # 如果文件${SBL_SYS_USR}/entware/bin/entware_install存在，则执行
    "${SBL_SYS_USR}/entware/bin/entware_install"
    #
    # Check if ${SBL_SYS_USR}/entware/bin/entware_install returns 0
    # 检查文件${SBL_SYS_USR}/entware/bin/entware_install的返回值是否为0
    if [ ${?} -ne 0 ]
    then
        # Stop and Exit
        # 如果返回值不为0，则该程序终止
        echo -e "($(basename $0)): $$ \033[1;41;37mFAILURE\033[0m: STAGE 2"
        #
        exit 9
    fi
    #
else
    # Stop and Exit
    # 如果文件${SBL_SYS_USR}/entware/bin/entware_install不存在，则该程序终止
    echo -e "($(basename $0)): $$ \033[1;43;31mNOTICE\033[0m: CAN'T LOCATE ${SBL_SYS_USR}/entware/bin/entware_install"
    echo -e "($(basename $0)): $$ \033[1;41;37mFAILURE\033[0m: STAGE 2"
    #
    exit 10
fi
#
sleep 10
#
# Check if ${USB_MOUNT_POINT}/home/root/ exists
# 检查目录${USB_MOUNT_POINT}/home/root/是否存在
if [ -d "${USB_MOUNT_POINT}/home/root/" ]
then
    # Mount ${USB_MOUNT_POINT}/home/ to /tmp/home/
    # 如果目录${USB_MOUNT_POINT}/home/root/存在，则执行
    mount "${USB_MOUNT_POINT}/home" "/tmp/home"
    echo -e "($(basename $0)): $$ \033[1;44;37mINFO\033[0m: HOME IS MOUNTED"
    #
else
    # Do nothing but prompt the user
    # 如果目录${USB_MOUNT_POINT}/home/root/不存在，则执行
    echo -e "($(basename $0)): $$ \033[1;43;31mNOTICE\033[0m: HOME CAN'T BE MOUNTED"
    echo -e "($(basename $0)): $$ \033[1;41;37mFAILURE\033[0m: STAGE 2"
    #
    exit 11
fi
#
sleep 10
#
ENTWARE_ENVIRONMENT="/opt/etc/init.d/rc.unslung"
#
# Check if ${ENTWARE_ENVIRONMENT} exists
# 检查文件${ENTWARE_ENVIRONMENT}是否存在
if [ -e "${ENTWARE_ENVIRONMENT}" ]
then
    # Start ${ENTWARE_ENVIRONMENT}
    # 如果文件${ENTWARE_ENVIRONMENT}存在，则执行
    "${ENTWARE_ENVIRONMENT}" start
    sleep 5
    #
    echo -e "($(basename $0)): $$ \033[1;42;37mSUCCESS\033[0m: ENABLE ENTWARE"
    #
else
    # Do nothing but prompt the user
    # 如果文件${ENTWARE_ENVIRONMENT}不存在，则执行
    echo -e "($(basename $0)): $$ \033[1;43;31mNOTICE\033[0m: CAN'T LOCATE ${ENTWARE_ENVIRONMENT}"
    echo -e "($(basename $0)): $$ \033[1;41;37mFAILURE\033[0m: STAGE 2"
    #
    exit 12
fi
#
sleep 10
#
# Create Public directories
# 创建公共目录
mkdir "${USB_MOUNT_POINT}/www"
echo -e "($(basename $0)): $$ \033[1;44;37mINFO\033[0m: PUBLIC DIRECTORIES ARE CREATED"
#
# Create Private directories
# 创建私有目录
mkdir "${USB_MOUNT_POINT}/home/root/Developments"
mkdir "${USB_MOUNT_POINT}/home/root/Documents"
mkdir "${USB_MOUNT_POINT}/home/root/Downloads"
mkdir "${USB_MOUNT_POINT}/home/root/Music"
mkdir "${USB_MOUNT_POINT}/home/root/Pictures"
mkdir "${USB_MOUNT_POINT}/home/root/Shared"
mkdir "${USB_MOUNT_POINT}/home/root/Videos"
echo -e "($(basename $0)): $$ \033[1;44;37mINFO\033[0m: PRIVATE DIRECTORIES ARE CREATED"
#
sleep 10
#
# Check if ${SBL_SYS_USR}/timezone/bin/timezone_install exists
# 检查文件${SBL_SYS_USR}/timezone/bin/timezone_install是否存在
if [ -e "${SBL_SYS_USR}/timezone/bin/timezone_install" ]
then
    # Invoke ${SBL_SYS_USR}/timezone/bin/timezone_install
    # 如果文件${SBL_SYS_USR}/timezone/bin/timezone_install存在，则执行
    "${SBL_SYS_USR}/timezone/bin/timezone_install"
    #
    # Check if ${SBL_SYS_USR}/timezone/bin/timezone_install returns 0
    # 检查文件${SBL_SYS_USR}/timezone/bin/timezone_install的返回值是否为0
    if [ ${?} -ne 0 ]
    then
        # Stop and Exit
        # 如果返回值不为0，则该程序终止
        echo -e "($(basename $0)): $$ \033[1;41;37mFAILURE\033[0m: STAGE 2"
        #
        exit 13
    fi
    #
else
    # Stop and Exit
    # 如果文件${SBL_SYS_USR}/timezone/bin/timezone_install不存在，则该程序终止
    echo -e "($(basename $0)): $$ \033[1;43;31mNOTICE\033[0m: CAN'T LOCATE ${SBL_SYS_USR}/timezone/bin/timezone_install"
    echo -e "($(basename $0)): $$ \033[1;41;37mFAILURE\033[0m: STAGE 2"
    #
    exit 14
fi
#
sleep 10
#
# Check if ${SBL_SYS_USR}/timezone/bin/timezone_enable.service exists
# 检查文件${SBL_SYS_USR}/timezone/bin/timezone_enable.service是否存在
if [ -e "${SBL_SYS_USR}/timezone/bin/timezone_enable.service" ]
then
    # Invoke ${SBL_SYS_USR}/timezone/bin/timezone_enable.service
    # 如果文件${SBL_SYS_USR}/timezone/bin/timezone_enable.service存在，则执行
    "${SBL_SYS_USR}/timezone/bin/timezone_enable.service"
    #
    # Check if ${SBL_SYS_USR}/timezone/bin/timezone_enable.service returns 0
    # 检查文件${SBL_SYS_USR}/timezone/bin/timezone_enable.service的返回值是否为0
    if [ ${?} -ne 0 ]
    then
        # Stop and Exit
        # 如果返回值不为0，则该程序终止
        echo -e "($(basename $0)): $$ \033[1;41;37mFAILURE\033[0m: STAGE 2"
        #
        exit 15
    fi
    #
else
    # Stop and Exit
    # 如果文件${SBL_SYS_USR}/timezone/bin/timezone_enable.service不存在，则该程序终止
    echo -e "($(basename $0)): $$ \033[1;43;31mNOTICE\033[0m: CAN'T LOCATE ${SBL_SYS_USR}/timezone/bin/timezone_enable.service"
    echo -e "($(basename $0)): $$ \033[1;41;37mFAILURE\033[0m: STAGE 2"
    #
    exit 16
fi
#
sleep 10
#
# Check if ${SBL_SYS_USR}/dependency/bin/dependency_install exists
# 检查文件${SBL_SYS_USR}/dependency/bin/dependency_install是否存在
if [ -e "${SBL_SYS_USR}/dependency/bin/dependency_install" ]
then
    # Invoke ${SBL_SYS_USR}/dependency/bin/dependency_install
    # 如果文件${SBL_SYS_USR}/dependency/bin/dependency_install存在，则执行
    "${SBL_SYS_USR}/dependency/bin/dependency_install"
    #
    # Check if ${SBL_SYS_USR}/dependency/bin/dependency_install returns 0
    # 检查文件${SBL_SYS_USR}/dependency/bin/dependency_install的返回值是否为0
    if [ ${?} -ne 0 ]
    then
        # Stop and Exit
        # 如果返回值不为0，则该程序终止
        echo -e "($(basename $0)): $$ \033[1;41;37mFAILURE\033[0m: STAGE 2"
        #
        exit 17
    fi
    #
else
    # Stop and Exit
    # 如果文件${SBL_SYS_USR}/dependency/bin/dependency_install不存在，则该程序终止
    echo -e "($(basename $0)): $$ \033[1;43;31mNOTICE\033[0m: CAN'T LOCATE ${SBL_SYS_USR}/dependency/bin/dependency_install"
    echo -e "($(basename $0)): $$ \033[1;41;37mFAILURE\033[0m: STAGE 2"
    #
    exit 18
fi
#
sleep 10
#
# Check if ${SBL_SYS_USR}/dependency/bin/dependency_enable.service exists
# 检查文件${SBL_SYS_USR}/dependency/bin/dependency_enable.service是否存在
if [ -e "${SBL_SYS_USR}/dependency/bin/dependency_enable.service" ]
then
    # Invoke ${SBL_SYS_USR}/dependency/bin/dependency_enable.service
    # 如果文件${SBL_SYS_USR}/dependency/bin/dependency_enable.service存在，则执行
    "${SBL_SYS_USR}/dependency/bin/dependency_enable.service"
    #
    # Check if ${SBL_SYS_USR}/dependency/bin/dependency_enable.service returns 0
    # 检查文件${SBL_SYS_USR}/dependency/bin/dependency_enable.service的返回值是否为0
    if [ ${?} -ne 0 ]
    then
        # Stop and Exit
        # 如果返回值不为0，则该程序终止
        echo -e "($(basename $0)): $$ \033[1;41;37mFAILURE\033[0m: STAGE 2"
        #
        exit 19
    fi
    #
else
    # Stop and Exit
    # 如果文件${SBL_SYS_USR}/dependency/bin/dependency_enable.service不存在，则该程序终止
    echo -e "($(basename $0)): $$ \033[1;43;31mNOTICE\033[0m: CAN'T LOCATE ${SBL_SYS_USR}/dependency/bin/dependency_enable.service"
    echo -e "($(basename $0)): $$ \033[1;41;37mFAILURE\033[0m: STAGE 2"
    #
    exit 20
fi
#
sleep 10
#
# Check if ${SBL_SYS_USR}/monit/bin/monit_install exists
# 检查文件${SBL_SYS_USR}/monit/bin/monit_install是否存在
if [ -e "${SBL_SYS_USR}/monit/bin/monit_install" ]
then
    # Invoke ${SBL_SYS_USR}/monit/bin/monit_install
    # 如果文件${SBL_SYS_USR}/monit/bin/monit_install存在，则执行
    "${SBL_SYS_USR}/monit/bin/monit_install"
    #
    # Check if ${SBL_SYS_USR}/monit/bin/monit_install returns 0
    # 检查文件${SBL_SYS_USR}/monit/bin/monit_install的返回值是否为0
    if [ ${?} -ne 0 ]
    then
        # Stop and Exit
        # 如果返回值不为0，则该程序终止
        echo -e "($(basename $0)): $$ \033[1;41;37mFAILURE\033[0m: STAGE 2"
        #
        exit 21
    fi
    #
else
    # Stop and Exit
    # 如果文件${SBL_SYS_USR}/monit/bin/monit_install不存在，则该程序终止
    echo -e "($(basename $0)): $$ \033[1;43;31mNOTICE\033[0m: CAN'T LOCATE ${SBL_SYS_USR}/monit/bin/monit_install"
    echo -e "($(basename $0)): $$ \033[1;41;37mFAILURE\033[0m: STAGE 2"
    #
    exit 22
fi
#
sleep 10
#
# Enable monit
# 启用monit
/opt/etc/init.d/S*monit start
#
sleep 10
#
# Check if ${SBL_SYS_USR}/dnsmasq.d/bin/dnsmasq.d_install exists
# 检查文件${SBL_SYS_USR}/dnsmasq.d/bin/dnsmasq.d_install是否存在
if [ -e "${SBL_SYS_USR}/dnsmasq.d/bin/dnsmasq.d_install" ]
then
    # Invoke ${SBL_SYS_USR}/dnsmasq.d/bin/dnsmasq.d_install
    # 如果文件${SBL_SYS_USR}/dnsmasq.d/bin/dnsmasq.d_install存在，则执行
    "${SBL_SYS_USR}/dnsmasq.d/bin/dnsmasq.d_install"
    #
    # Check if ${SBL_SYS_USR}/dnsmasq.d/bin/dnsmasq.d_install returns 0
    # 检查文件${SBL_SYS_USR}/dnsmasq.d/bin/dnsmasq.d_install的返回值是否为0
    if [ ${?} -ne 0 ]
    then
        # Stop and Exit
        # 如果返回值不为0，则该程序终止
        echo -e "($(basename $0)): $$ \033[1;41;37mFAILURE\033[0m: STAGE 2"
        #
        exit 23
    fi
    #
else
    # Stop and Exit
    # 如果文件${SBL_SYS_USR}/dnsmasq.d/bin/dnsmasq.d_install不存在，则该程序终止
    echo -e "($(basename $0)): $$ \033[1;43;31mNOTICE\033[0m: CAN'T LOCATE ${SBL_SYS_USR}/dnsmasq.d/bin/dnsmasq.d_install"
    echo -e "($(basename $0)): $$ \033[1;41;37mFAILURE\033[0m: STAGE 2"
    #
    exit 24
fi
#
sleep 10
#
# Check if ${SBL_SYS_USR}/dnsmasq.d/bin/dnsmasq.d_enable.service exists
# 检查文件${SBL_SYS_USR}/dnsmasq.d/bin/dnsmasq.d_enable.service是否存在
if [ -e "${SBL_SYS_USR}/dnsmasq.d/bin/dnsmasq.d_enable.service" ]
then
    # Invoke ${SBL_SYS_USR}/dnsmasq.d/bin/dnsmasq.d_enable.service
    # 如果文件${SBL_SYS_USR}/dnsmasq.d/bin/dnsmasq.d_enable.service存在，则执行
    "${SBL_SYS_USR}/dnsmasq.d/bin/dnsmasq.d_enable.service"
    #
    # Check if ${SBL_SYS_USR}/dnsmasq.d/bin/dnsmasq.d_enable.service returns 0
    # 检查文件${SBL_SYS_USR}/dnsmasq.d/bin/dnsmasq.d_enable.service的返回值是否为0
    if [ ${?} -ne 0 ]
    then
        # Stop and Exit
        # 如果返回值不为0，则该程序终止
        echo -e "($(basename $0)): $$ \033[1;41;37mFAILURE\033[0m: STAGE 2"
        #
        exit 25
    fi
    #
else
    # Stop and Exit
    # 如果文件${SBL_SYS_USR}/dnsmasq.d/bin/dnsmasq.d_enable.service不存在，则该程序终止
    echo -e "($(basename $0)): $$ \033[1;43;31mNOTICE\033[0m: CAN'T LOCATE ${SBL_SYS_USR}/dnsmasq.d/bin/dnsmasq.d_enable.service"
    echo -e "($(basename $0)): $$ \033[1;41;37mFAILURE\033[0m: STAGE 2"
    #
    exit 26
fi
#
sleep 10
#
# Check if ${SBL_SYS_USR}/fwd/bin/fwd_install exists
# 检查文件${SBL_SYS_USR}/fwd/bin/fwd_install是否存在
if [ -e "${SBL_SYS_USR}/fwd/bin/fwd_install" ]
then
    # Invoke ${SBL_SYS_USR}/fwd/bin/fwd_install
    # 如果文件${SBL_SYS_USR}/fwd/bin/fwd_install存在，则执行
    "${SBL_SYS_USR}/fwd/bin/fwd_install"
    #
    # Check if ${SBL_SYS_USR}/fwd/bin/fwd_install returns 0
    # 检查文件${SBL_SYS_USR}/fwd/bin/fwd_install的返回值是否为0
    if [ ${?} -ne 0 ]
    then
        # Stop and Exit
        # 如果返回值不为0，则该程序终止
        echo -e "($(basename $0)): $$ \033[1;41;37mFAILURE\033[0m: STAGE 2"
        #
        exit 27
    fi
    #
else
    # Stop and Exit
    # 如果文件${SBL_SYS_USR}/fwd/bin/fwd_install不存在，则该程序终止
    echo -e "($(basename $0)): $$ \033[1;43;31mNOTICE\033[0m: CAN'T LOCATE ${SBL_SYS_USR}/fwd/bin/fwd_install"
    echo -e "($(basename $0)): $$ \033[1;41;37mFAILURE\033[0m: STAGE 2"
    #
    exit 28
fi
#
sleep 10
#
# Check if ${SBL_SYS_BIN}/list_of_user_custom_scripts exists
# 检查文件${SBL_SYS_BIN}/list_of_user_custom_scripts是否存在
if [ -e "${SBL_SYS_BIN}/list_of_user_custom_scripts" ]
then
    # Modify ${SBL_SYS_BIN}/list_of_user_custom_scripts
    # 修改文件${SBL_SYS_BIN}/list_of_user_custom_scripts
    sed -i -e '/# NEXT SERVICE/i\# DEPENDENCY SERVICE\n\"${SBL_SYS_USR}/dependency/bin/dependency_enable.service\"\n#' "${SBL_SYS_BIN}/list_of_user_custom_scripts"
    #
    sed -i -e '/# NEXT SERVICE/i\# DNSMASQ.D SERVICE\n\"${SBL_SYS_USR}/dnsmasq.d/bin/dnsmasq.d_enable.service\"\n#' "${SBL_SYS_BIN}/list_of_user_custom_scripts"
    #
else
    # Stop and Exit
    # 如果文件${SBL_SYS_BIN}/list_of_user_custom_scripts不存在，则该程序终止
    echo -e "($(basename $0)): $$ \033[1;43;31mNOTICE\033[0m: CAN'T LOCATE ${SBL_SYS_BIN}/list_of_user_custom_scripts"
    echo -e "($(basename $0)): $$ \033[1;41;37mFAILURE\033[0m: STAGE 2"
    #
    exit 29
fi
#
sleep 10
#
echo -e "($(basename $0)): $$ \033[1;42;37mSUCCESS\033[0m: STAGE 2"
#
########## END ##########
#
#
########## STAGE 3 ##########
#
echo -e "\033[1;45;37m############### STAGE 3: INSTALL ADDONS ###############\033[0m"
#
cp -f "${SBL_SYS_ETC}/sbl_credentials" "/opt/etc"
#
# Install essential tools
# 安装必备工具
for TOOL_NAME in "bcrypt-tool" "gohash" "gotee"
do
    cp -f "${SBL_SYS_BIN}/${TOOL_NAME}/${TOOL_NAME}-${OPERATING_SYSTEM}-${ROUTER_ARCHITECTURE}" "${ENTWARE_BIN}/${TOOL_NAME}"
done
#
# Temporary Solution: The 4-line code below is to solve the problem that gotee can't output the lines without \n, which makes no instruction given during the installation of the addons
# 临时解决方案：以下4行代码的存在是因为gotee不能输出没有\n的行，导致不显示插件安装提示信息
if ${TEST_FMW_TEE}
then
    exit 30
fi
#
# Check if ${SBL_SYS_BIN}/addons_install exists
# 检查文件${SBL_SYS_BIN}/addons_install是否存在
if [ -e "${SBL_SYS_BIN}/addons_install" ]
then
    # Invoke ${SBL_SYS_BIN}/addons_install
    # 如果文件${SBL_SYS_BIN}/addons_install存在，则执行${SBL_SYS_BIN}/addons_install
    "${SBL_SYS_BIN}/addons_install"
    #
    # Check if ${SBL_SYS_BIN}/addons_install returns 0
    # 检查文件${SBL_SYS_BIN}/addons_install的返回值是否为0
    if [ ${?} -eq 0 ]
    then
        # Continue
        # 如果返回值为0，则继续
        echo -e "($(basename $0)): $$ \033[1;42;37mSUCCESS\033[0m: STAGE 3"
        #
    else
        # Stop and Exit
        # 如果返回值不为0，则该程序终止
        echo -e "($(basename $0)): $$ \033[1;43;31mNOTICE\033[0m: ERRORS ON ${SBL_SYS_BIN}/addons_install"
        echo -e "($(basename $0)): $$ \033[1;41;37mFAILURE\033[0m: STAGE 3"
    fi
    #
else
    # Stop and Exit
    # 如果文件${SBL_SYS_BIN}/addons_install不存在，则该程序终止
    echo -e "($(basename $0)): $$ \033[1;43;31mNOTICE\033[0m: CAN'T LOCATE ${SBL_SYS_BIN}/addons_install"
    echo -e "($(basename $0)): $$ \033[1;41;37mFAILURE\033[0m: STAGE 3"
fi
#
########## END ##########