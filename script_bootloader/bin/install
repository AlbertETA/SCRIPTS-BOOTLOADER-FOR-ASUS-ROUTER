#!/bin/sh
#
# 此程序用于安装“华硕路由器开机自动运行程序系统”
#
########## CHECK ASUS ROUTER MODEL ##########
#
ROUTER_MODEL=$(nvram get model)
#
echo "($(basename $0)): $$ *--------- SCRIPTS-BOOTLOADER-FOR-ASUS-ROUTER ON ${ROUTER_MODEL} INSTALLATION ---------*"
#
########## END ##########
#
#
########## SET THE CUSTOM VARIABLES ##########
#
# 设置自定义变量
# 当该程序运行结束，此处设置的变量自动取消
#
# USB_MOUNT_POINT: The mount point of the USB flash drive
# 设置自定义变量USB_MOUNT_POINT为U盘挂载点
USB_MOUNT_POINT_COUNT=$(find / -name 'script_bootloader' | wc -l)
if [ ${USB_MOUNT_POINT_COUNT} == "0" ]
then
    echo "($(basename $0)): $$ ***** UNABLE TO LOCATE DIRECTORY script_bootloader *****"
    exit 1
    #
elif [ ${USB_MOUNT_POINT_COUNT} == "1" ]
then
    USB_MOUNT_POINT=$(find / -name 'script_bootloader' | sed 's/\/script_bootloader//')
    #
else
    echo "($(basename $0)): $$ ***** NUMBER OF DIRECTORY script_bootloader MUST BE ONE *****"
    exit 2
fi
#
# SBL_SYS_ROOT: The root directory for SCRIPTS-BOOTLOADER-FOR-ASUS-ROUTER
# 设置自定义变量SBL_SYS_ROOT为SCRIPTS-BOOTLOADER-FOR-ASUS-ROUTER系统根目录
SBL_SYS_ROOT=${USB_MOUNT_POINT}/script_bootloader
#
# SBL_SYS_BIN: The directory which contains all the executable files related to SCRIPTS-BOOTLOADER-FOR-ASUS-ROUTER
# 设置自定义变量SBL_SYS_BIN为SCRIPTS-BOOTLOADER-FOR-ASUS-ROUTER系统可执行文件目录
SBL_SYS_BIN=${SBL_SYS_ROOT}/bin
#
# SBL_SYS_ETC: The directory which contains all the configuration files related to SCRIPTS-BOOTLOADER-FOR-ASUS-ROUTER
# 设置自定义变量SBL_SYS_ETC为SCRIPTS-BOOTLOADER-FOR-ASUS-ROUTER系统配置文件目录
SBL_SYS_ETC=${SBL_SYS_ROOT}/etc
#
# SBL_SYS_TMP: The directory which contains all the temporary files related to SCRIPTS-BOOTLOADER-FOR-ASUS-ROUTER
# 设置自定义变量SBL_SYS_TMP为SCRIPTS-BOOTLOADER-FOR-ASUS-ROUTER系统临时文件目录
SBL_SYS_TMP=${SBL_SYS_ROOT}/tmp
#
# SBL_SYS_USR: The directory which contains all the external software resources (add-ons) related to SCRIPTS-BOOTLOADER-FOR-ASUS-ROUTER
# 设置自定义变量SBL_SYS_USR为SCRIPTS-BOOTLOADER-FOR-ASUS-ROUTER系统外部软件资源目录，即插件目录
SBL_SYS_USR=${SBL_SYS_ROOT}/usr
#
# SBL_SYS_VAR: The directory which contains all the variable files related to SCRIPTS-BOOTLOADER-FOR-ASUS-ROUTER
# 设置自定义变量SBL_SYS_VAR为SCRIPTS-BOOTLOADER-FOR-ASUS-ROUTER系统可变文件目录
SBL_SYS_VAR=${SBL_SYS_ROOT}/var
#
# ENTWARE_ETC: The directory which contains all the configuration files installed by Entware
# 设置自定义变量ENTWARE_ETC为Entware安装的配置文件目录
ENTWARE_ETC=${USB_MOUNT_POINT}/etc
#
# ENTWARE_MONITD: The directory which contains all the configuration files used by monit
# 设置自定义变量ENTWARE_MONITD为monit配置文件目录
ENTWARE_MONITD=${ENTWARE_ETC}/monit.d
#
# TEST_FMW_TEE: The value to show if tee exists in the firmware
# 设置自定义变量TEST_FMW_TEE为固件内tee命令的测试值
if [ -n "$(which tee)" ]
then
    TEST_FMW_TEE=0
else
    TEST_FMW_TEE=1
fi
#
########## END ##########
#
#
########## STAGE 1 ##########
#
echo -e "\033[1;45;37m***** STAGE 1: CONFIGURE THE ROUTER ${ROUTER_MODEL} *****\033[0m"
#
sleep 10
#
# Check if ${SBL_SYS_BIN}/sys_install exists
# 检查文件${SBL_SYS_BIN}/sys_install是否存在
if [ -e "${SBL_SYS_BIN}/sys_install" ]
then
    # Invoke ${SBL_SYS_BIN}/sys_install
    # 如果文件${SBL_SYS_BIN}/sys_install存在，则执行${SBL_SYS_BIN}/sys_install
    ${SBL_SYS_BIN}/sys_install
    #
    # Check if ${SBL_SYS_BIN}/sys_install returns 0
    # 检查文件${SBL_SYS_BIN}/sys_install的返回值是否为0
    if [ $? != '0' ]
    then
        # Stop and Exit
        # 如果返回值不为0，则该程序终止
        echo "($(basename $0)): $$ ***** ERROR: ${SBL_SYS_BIN}/sys_install *****"
        echo -e "\033[1;41;37m***** STAGE 1: FAILED *****\033[0m"
        exit 3
        #
    else
        # Continue
        # 如果返回值为0，则继续
        echo -e "\033[1;42;37m***** STAGE 1: SUCCEEDED *****\033[0m"
    fi
    #
else
    # Stop and Exit
    # 如果文件${SBL_SYS_BIN}/sys_install不存在，则该程序终止
    echo "($(basename $0)): $$ ***** ERROR: CAN'T LOCATE ${SBL_SYS_BIN}/sys_install *****"
    echo -e "\033[1;41;37m***** STAGE 1: FAILED *****\033[0m"
    exit 4
fi
#
########## END ##########
#
#
########## STAGE 2 ##########
#
echo -e "\033[1;45;37m***** STAGE 2: INSTALL REQUISITE COMPONENTS *****\033[0m"
#
sleep 10
#
# Check if ${SBL_SYS_USR}/swap/bin/swap_install exists
# 检查文件${SBL_SYS_USR}/swap/bin/swap_install是否存在
if [ -e "${SBL_SYS_USR}/swap/bin/swap_install" ]
then
    # Invoke ${SBL_SYS_USR}/swap/bin/swap_install
    # 如果文件${SBL_SYS_USR}/swap/bin/swap_install存在，则执行
    ${SBL_SYS_USR}/swap/bin/swap_install
    #
    # Check if ${SBL_SYS_USR}/swap/bin/swap_install returns 0
    # 检查文件${SBL_SYS_USR}/swap/bin/swap_install的返回值是否为0
    if [ $? != '0' ]
    then
        # Stop and Exit
        # 如果返回值不为0，则该程序终止
        echo "($(basename $0)): $$ ***** ERROR: ${SBL_SYS_USR}/swap/bin/swap_install *****"
        echo -e "\033[1;41;37m***** STAGE 2: FAILED *****\033[0m"
        exit 5
    fi
    #
else
    # Stop and Exit
    # 如果文件${SBL_SYS_USR}/swap/bin/swap_install不存在，则该程序终止
    echo "($(basename $0)): $$ ***** ERROR: CAN'T LOCATE ${SBL_SYS_USR}/swap/bin/swap_install *****"
    echo -e "\033[1;41;37m***** STAGE 2: FAILED *****\033[0m"
    exit 6
fi
#
sleep 10
#
# Check if ${SBL_SYS_USR}/swap/bin/swap_enable.service exists
# 检查文件${SBL_SYS_USR}/swap/bin/swap_enable.service是否存在
if [ -e "${SBL_SYS_USR}/swap/bin/swap_enable.service" ]
then
    # Invoke ${SBL_SYS_USR}/swap/bin/swap_enable.service
    # 如果文件${SBL_SYS_USR}/swap/bin/swap_enable.service存在，则执行
    ${SBL_SYS_USR}/swap/bin/swap_enable.service
    #
    # Check if ${SBL_SYS_USR}/swap/bin/swap_enable.service returns 0
    # 检查文件${SBL_SYS_USR}/swap/bin/swap_enable.service的返回值是否为0
    if [ $? != '0' ]
    then
        # Stop and Exit
        # 如果返回值不为0，则该程序终止
        echo "($(basename $0)): $$ ***** ERROR: ${SBL_SYS_USR}/swap/bin/swap_enable.service *****"
        echo -e "\033[1;41;37m***** STAGE 2: FAILED *****\033[0m"
        exit 7
    fi
    #
else
    # Stop and Exit
    # 如果文件${SBL_SYS_USR}/swap/bin/swap_enable.service不存在，则该程序终止
    echo "($(basename $0)): $$ ***** ERROR: CAN'T LOCATE ${SBL_SYS_USR}/swap/bin/swap_enable.service *****"
    echo -e "\033[1;41;37m***** STAGE 2: FAILED *****\033[0m"
    exit 8
fi
#
sleep 10
#
# Check if ${SBL_SYS_USR}/entware/bin/entware_install exists
# 检查文件${SBL_SYS_USR}/entware/bin/entware_install是否存在
if [ -e "${SBL_SYS_USR}/entware/bin/entware_install" ]
then
    # Invoke ${SBL_SYS_USR}/entware/bin/entware_install
    # 如果文件${SBL_SYS_USR}/entware/bin/entware_install存在，则执行
    ${SBL_SYS_USR}/entware/bin/entware_install
    #
    # Check if ${SBL_SYS_USR}/entware/bin/entware_install returns 0
    # 检查文件${SBL_SYS_USR}/entware/bin/entware_install的返回值是否为0
    if [ $? != '0' ]
    then
        # Stop and Exit
        # 如果返回值不为0，则该程序终止
        echo "($(basename $0)): $$ ***** ERROR: ${SBL_SYS_USR}/entware/bin/entware_install *****"
        echo -e "\033[1;41;37m***** STAGE 2: FAILED *****\033[0m"
        exit 9
    fi
    #
else
    # Stop and Exit
    # 如果文件${SBL_SYS_USR}/entware/bin/entware_install不存在，则该程序终止
    echo "($(basename $0)): $$ ***** ERROR: CAN'T LOCATE ${SBL_SYS_USR}/entware/bin/entware_install *****"
    echo -e "\033[1;41;37m***** STAGE 2: FAILED *****\033[0m"
    exit 10
fi
#
sleep 10
#
# Check if ${USB_MOUNT_POINT}/home/root/ exists
# 检查目录${USB_MOUNT_POINT}/home/root/是否存在
if [ -d "${USB_MOUNT_POINT}/home/root/" ]
then
    # Mount ${USB_MOUNT_POINT}/home/ to /tmp/home/
    # 如果目录${USB_MOUNT_POINT}/home/root/存在，则执行
    mount ${USB_MOUNT_POINT}/home/ /tmp/home/
    echo "($(basename $0)): $$ ***** HOME HAS BEEN MOUNTED *****"
    #
else
    # Do nothing but prompt the user
    # 如果目录${USB_MOUNT_POINT}/home/root/不存在，则执行
    echo "($(basename $0)): $$ ***** HOME HAS NOT BEEN MOUNTED *****"
    echo -e "\033[1;41;37m***** STAGE 2: FAILED *****\033[0m"
    exit 11
fi
#
sleep 10
#
ENTWARE_ENVIRONMENT="/opt/etc/init.d/rc.unslung"
#
# Check if ${ENTWARE_ENVIRONMENT} exists
# 检查文件${ENTWARE_ENVIRONMENT}是否存在
if [ -e "${ENTWARE_ENVIRONMENT}" ]
then
    echo "($(basename $0)): $$ ***** ${ENTWARE_ENVIRONMENT} EXISTS *****"
    # Start ${ENTWARE_ENVIRONMENT}
    # 如果文件${ENTWARE_ENVIRONMENT}存在，则执行
    ${ENTWARE_ENVIRONMENT} start
    echo "($(basename $0)): $$ ***** ENTWARE_ENABLE SERVICE HAS BEEN LOADED *****"
    #
else
    # Do nothing but prompt the user
    # 如果文件${ENTWARE_ENVIRONMENT}不存在，则执行
    echo "($(basename $0)): $$ ***** UNABLE TO LOCATE ${ENTWARE_ENVIRONMENT} *****"
    echo "($(basename $0)): $$ ***** ENTWARE_ENABLE SERVICE HAS NOT BEEN LOADED *****"
    echo -e "\033[1;41;37m***** STAGE 2: FAILED *****\033[0m"
    exit 12
fi
#
sleep 10
#
# Create Public directories
# 创建公共目录
mkdir ${USB_MOUNT_POINT}/www
echo "($(basename $0)): $$ ***** PUBLIC DIRECTORIES HAVE BEEN CREATED *****"
#
# Create Personal directories
# 创建私有目录
mkdir ${USB_MOUNT_POINT}/home/root/Documents
mkdir ${USB_MOUNT_POINT}/home/root/Downloads
mkdir ${USB_MOUNT_POINT}/home/root/Music
mkdir ${USB_MOUNT_POINT}/home/root/Pictures
mkdir ${USB_MOUNT_POINT}/home/root/Videos
echo "($(basename $0)): $$ ***** PERSONAL DIRECTORIES HAVE BEEN CREATED *****"
#
sleep 10
#
# Check if ${SBL_SYS_USR}/timezone/bin/timezone_install exists
# 检查文件${SBL_SYS_USR}/timezone/bin/timezone_install是否存在
if [ -e "${SBL_SYS_USR}/timezone/bin/timezone_install" ]
then
    # Invoke ${SBL_SYS_USR}/timezone/bin/timezone_install
    # 如果文件${SBL_SYS_USR}/timezone/bin/timezone_install存在，则执行
    ${SBL_SYS_USR}/timezone/bin/timezone_install
    #
    # Check if ${SBL_SYS_USR}/timezone/bin/timezone_install returns 0
    # 检查文件${SBL_SYS_USR}/timezone/bin/timezone_install的返回值是否为0
    if [ $? != '0' ]
    then
        # Stop and Exit
        # 如果返回值不为0，则该程序终止
        echo "($(basename $0)): $$ ***** ERROR: ${SBL_SYS_USR}/timezone/bin/timezone_install *****"
        echo -e "\033[1;41;37m***** STAGE 2: FAILED *****\033[0m"
        exit 13
    fi
    #
else
    # Stop and Exit
    # 如果文件${SBL_SYS_USR}/timezone/bin/timezone_install不存在，则该程序终止
    echo "($(basename $0)): $$ ***** ERROR: CAN'T LOCATE ${SBL_SYS_USR}/timezone/bin/timezone_install *****"
    echo -e "\033[1;41;37m***** STAGE 2: FAILED *****\033[0m"
    exit 14
fi
#
sleep 10
#
# Check if ${SBL_SYS_USR}/timezone/bin/timezone_enable.service exists
# 检查文件${SBL_SYS_USR}/timezone/bin/timezone_enable.service是否存在
if [ -e "${SBL_SYS_USR}/timezone/bin/timezone_enable.service" ]
then
    # Invoke ${SBL_SYS_USR}/timezone/bin/timezone_enable.service
    # 如果文件${SBL_SYS_USR}/timezone/bin/timezone_enable.service存在，则执行
    ${SBL_SYS_USR}/timezone/bin/timezone_enable.service
    #
    # Check if ${SBL_SYS_USR}/timezone/bin/timezone_enable.service returns 0
    # 检查文件${SBL_SYS_USR}/timezone/bin/timezone_enable.service的返回值是否为0
    if [ $? != '0' ]
    then
        # Stop and Exit
        # 如果返回值不为0，则该程序终止
        echo "($(basename $0)): $$ ***** ERROR: ${SBL_SYS_USR}/timezone/bin/timezone_enable.service *****"
        echo -e "\033[1;41;37m***** STAGE 2: FAILED *****\033[0m"
        exit 15
    fi
    #
else
    # Stop and Exit
    # 如果文件${SBL_SYS_USR}/timezone/bin/timezone_enable.service不存在，则该程序终止
    echo "($(basename $0)): $$ ***** ERROR: CAN'T LOCATE ${SBL_SYS_USR}/timezone/bin/timezone_enable.service *****"
    echo -e "\033[1;41;37m***** STAGE 2: FAILED *****\033[0m"
    exit 16
fi
#
sleep 10
#
# Check if ${SBL_SYS_USR}/dependency/bin/dependency_install exists
# 检查文件${SBL_SYS_USR}/dependency/bin/dependency_install是否存在
if [ -e "${SBL_SYS_USR}/dependency/bin/dependency_install" ]
then
    # Invoke ${SBL_SYS_USR}/dependency/bin/dependency_install
    # 如果文件${SBL_SYS_USR}/dependency/bin/dependency_install存在，则执行
    ${SBL_SYS_USR}/dependency/bin/dependency_install
    #
    # Check if ${SBL_SYS_USR}/dependency/bin/dependency_install returns 0
    # 检查文件${SBL_SYS_USR}/dependency/bin/dependency_install的返回值是否为0
    if [ $? != '0' ]
    then
        # Stop and Exit
        # 如果返回值不为0，则该程序终止
        echo "($(basename $0)): $$ ***** ERROR: ${SBL_SYS_USR}/dependency/bin/dependency_install *****"
        echo -e "\033[1;41;37m***** STAGE 2: FAILED *****\033[0m"
        exit 17
    fi
    #
else
    # Stop and Exit
    # 如果文件${SBL_SYS_USR}/dependency/bin/dependency_install不存在，则该程序终止
    echo "($(basename $0)): $$ ***** ERROR: CAN'T LOCATE ${SBL_SYS_USR}/dependency/bin/dependency_install *****"
    echo -e "\033[1;41;37m***** STAGE 2: FAILED *****\033[0m"
    exit 18
fi
#
sleep 10
#
# Check if ${SBL_SYS_USR}/dependency/bin/dependency_enable.service exists
# 检查文件${SBL_SYS_USR}/dependency/bin/dependency_enable.service是否存在
if [ -e "${SBL_SYS_USR}/dependency/bin/dependency_enable.service" ]
then
    # Invoke ${SBL_SYS_USR}/dependency/bin/dependency_enable.service
    # 如果文件${SBL_SYS_USR}/dependency/bin/dependency_enable.service存在，则执行
    ${SBL_SYS_USR}/dependency/bin/dependency_enable.service
    #
    # Check if ${SBL_SYS_USR}/dependency/bin/dependency_enable.service returns 0
    # 检查文件${SBL_SYS_USR}/dependency/bin/dependency_enable.service的返回值是否为0
    if [ $? != '0' ]
    then
        # Stop and Exit
        # 如果返回值不为0，则该程序终止
        echo "($(basename $0)): $$ ***** ERROR: ${SBL_SYS_USR}/dependency/bin/dependency_enable.service *****"
        echo -e "\033[1;41;37m***** STAGE 2: FAILED *****\033[0m"
        exit 19
    fi
    #
else
    # Stop and Exit
    # 如果文件${SBL_SYS_USR}/dependency/bin/dependency_enable.service不存在，则该程序终止
    echo "($(basename $0)): $$ ***** ERROR: CAN'T LOCATE ${SBL_SYS_USR}/dependency/bin/dependency_enable.service *****"
    echo -e "\033[1;41;37m***** STAGE 2: FAILED *****\033[0m"
    exit 20
fi
#
sleep 10
#
# Check if ${SBL_SYS_USR}/monit/bin/monit_install exists
# 检查文件${SBL_SYS_USR}/monit/bin/monit_install是否存在
if [ -e "${SBL_SYS_USR}/monit/bin/monit_install" ]
then
    # Invoke ${SBL_SYS_USR}/monit/bin/monit_install
    # 如果文件${SBL_SYS_USR}/monit/bin/monit_install存在，则执行
    ${SBL_SYS_USR}/monit/bin/monit_install
    #
    # Check if ${SBL_SYS_USR}/monit/bin/monit_install returns 0
    # 检查文件${SBL_SYS_USR}/monit/bin/monit_install的返回值是否为0
    if [ $? != '0' ]
    then
        # Stop and Exit
        # 如果返回值不为0，则该程序终止
        echo "($(basename $0)): $$ ***** ERROR: ${SBL_SYS_USR}/monit/bin/monit_install *****"
        echo -e "\033[1;41;37m***** STAGE 2: FAILED *****\033[0m"
        exit 21
    fi
    #
else
    # Stop and Exit
    # 如果文件${SBL_SYS_USR}/monit/bin/monit_install不存在，则该程序终止
    echo "($(basename $0)): $$ ***** ERROR: CAN'T LOCATE ${SBL_SYS_USR}/monit/bin/monit_install *****"
    echo -e "\033[1;41;37m***** STAGE 2: FAILED *****\033[0m"
    exit 22
fi
#
sleep 10
#
# Enable monit
# 启用monit
/opt/etc/init.d/S*monit start
#
sleep 10
#
# Check if ${SBL_SYS_USR}/dnsmasq.d/bin/dnsmasq.d_install exists
# 检查文件${SBL_SYS_USR}/dnsmasq.d/bin/dnsmasq.d_install是否存在
if [ -e "${SBL_SYS_USR}/dnsmasq.d/bin/dnsmasq.d_install" ]
then
    # Invoke ${SBL_SYS_USR}/dnsmasq.d/bin/dnsmasq.d_install
    # 如果文件${SBL_SYS_USR}/dnsmasq.d/bin/dnsmasq.d_install存在，则执行
    ${SBL_SYS_USR}/dnsmasq.d/bin/dnsmasq.d_install
    #
    # Check if ${SBL_SYS_USR}/dnsmasq.d/bin/dnsmasq.d_install returns 0
    # 检查文件${SBL_SYS_USR}/dnsmasq.d/bin/dnsmasq.d_install的返回值是否为0
    if [ $? != '0' ]
    then
        # Stop and Exit
        # 如果返回值不为0，则该程序终止
        echo "($(basename $0)): $$ ***** ERROR: ${SBL_SYS_USR}/dnsmasq.d/bin/dnsmasq.d_install *****"
        echo -e "\033[1;41;37m***** STAGE 2: FAILED *****\033[0m"
        exit 23
    fi
    #
else
    # Stop and Exit
    # 如果文件${SBL_SYS_USR}/dnsmasq.d/bin/dnsmasq.d_install不存在，则该程序终止
    echo "($(basename $0)): $$ ***** ERROR: CAN'T LOCATE ${SBL_SYS_USR}/dnsmasq.d/bin/dnsmasq.d_install *****"
    echo -e "\033[1;41;37m***** STAGE 2: FAILED *****\033[0m"
    exit 24
fi
#
sleep 10
#
# Check if ${SBL_SYS_USR}/dnsmasq.d/bin/dnsmasq.d_enable.service exists
# 检查文件${SBL_SYS_USR}/dnsmasq.d/bin/dnsmasq.d_enable.service是否存在
if [ -e "${SBL_SYS_USR}/dnsmasq.d/bin/dnsmasq.d_enable.service" ]
then
    # Invoke ${SBL_SYS_USR}/dnsmasq.d/bin/dnsmasq.d_enable.service
    # 如果文件${SBL_SYS_USR}/dnsmasq.d/bin/dnsmasq.d_enable.service存在，则执行
    ${SBL_SYS_USR}/dnsmasq.d/bin/dnsmasq.d_enable.service
    #
    # Check if ${SBL_SYS_USR}/dnsmasq.d/bin/dnsmasq.d_enable.service returns 0
    # 检查文件${SBL_SYS_USR}/dnsmasq.d/bin/dnsmasq.d_enable.service的返回值是否为0
    if [ $? != '0' ]
    then
        # Stop and Exit
        # 如果返回值不为0，则该程序终止
        echo "($(basename $0)): $$ ***** ERROR: ${SBL_SYS_USR}/dnsmasq.d/bin/dnsmasq.d_enable.service *****"
        echo -e "\033[1;41;37m***** STAGE 2: FAILED *****\033[0m"
        exit 25
    fi
    #
else
    # Stop and Exit
    # 如果文件${SBL_SYS_USR}/dnsmasq.d/bin/dnsmasq.d_enable.service不存在，则该程序终止
    echo "($(basename $0)): $$ ***** ERROR: CAN'T LOCATE ${SBL_SYS_USR}/dnsmasq.d/bin/dnsmasq.d_enable.service *****"
    echo -e "\033[1;41;37m***** STAGE 2: FAILED *****\033[0m"
    exit 26
fi
#
sleep 10
#
# Check if ${SBL_SYS_BIN}/list_of_user_custom_scripts exists
# 检查文件${SBL_SYS_BIN}/list_of_user_custom_scripts是否存在
if [ -e "${SBL_SYS_BIN}/list_of_user_custom_scripts" ]
then
    echo "($(basename $0)): $$ ***** LIST OF USER'S CUSTOM SCRIPTS EXISTS *****"
    #
    # Modify ${SBL_SYS_BIN}/list_of_user_custom_scripts
    # 修改文件${SBL_SYS_BIN}/list_of_user_custom_scripts
    ${USB_MOUNT_POINT}/bin/sed -i -e '/# NEXT SERVICE/i\# DEPENDENCY SERVICE\n${SBL_SYS_USR}/dependency/bin/dependency_enable.service\n#' ${SBL_SYS_BIN}/list_of_user_custom_scripts
    #
    ${USB_MOUNT_POINT}/bin/sed -i -e '/# NEXT SERVICE/i\# DNSMASQ.D SERVICE\n${SBL_SYS_USR}/dnsmasq.d/bin/dnsmasq.d_enable.service\n#' ${SBL_SYS_BIN}/list_of_user_custom_scripts
    #
else
    # Stop and Exit
    # 如果文件${SBL_SYS_BIN}/list_of_user_custom_scripts不存在，则该程序终止
    echo "($(basename $0)): $$ ***** ERROR: CAN'T LOCATE ${SBL_SYS_BIN}/list_of_user_custom_scripts *****"
    echo -e "\033[1;41;37m***** STAGE 2: FAILED *****\033[0m"
    exit 27
fi
#
sleep 10
#
echo -e "\033[1;42;37m***** STAGE 2: SUCCEEDED *****\033[0m"
#
########## END ##########
#
#
########## STAGE 3 ##########
#
echo -e "\033[1;45;37m***** STAGE 3: INSTALL ADDONS *****\033[0m"
#
# Temporary Solution: The 4-line code below is to solve the problem that gotee can't output the lines without \n, which makes no instruction given during the installation of the addons
# 临时解决方案：以下4行代码的存在是因为gotee不能输出没有\n的行，导致不显示插件安装提示信息
if [ ${TEST_FMW_TEE} -eq 1 ]
then
    exit 28
fi
#
# Check if ${SBL_SYS_BIN}/addons_install exists
# 检查文件${SBL_SYS_BIN}/addons_install是否存在
if [ -e "${SBL_SYS_BIN}/addons_install" ]
then
    # Invoke ${SBL_SYS_BIN}/addons_install
    # 如果文件${SBL_SYS_BIN}/addons_install存在，则执行${SBL_SYS_BIN}/addons_install
    ${SBL_SYS_BIN}/addons_install
    #
    # Check if ${SBL_SYS_BIN}/addons_install returns 0
    # 检查文件${SBL_SYS_BIN}/addons_install的返回值是否为0
    if [ $? != '0' ]
    then
        # Stop and Exit
        # 如果返回值不为0，则该程序终止
        echo "($(basename $0)): $$ ***** ERROR: ${SBL_SYS_BIN}/addons_install *****"
        echo -e "\033[1;41;37m***** STAGE 3: FAILED *****\033[0m"
        #
    else
        # Continue
        # 如果返回值为0，则继续
        echo -e "\033[1;42;37m***** STAGE 3: SUCCEEDED *****\033[0m"
    fi
    #
else
    # Stop and Exit
    # 如果文件${SBL_SYS_BIN}/addons_install不存在，则该程序终止
    echo "($(basename $0)): $$ ***** ERROR: CAN'T LOCATE ${SBL_SYS_BIN}/addons_install *****"
    echo -e "\033[1;41;37m***** STAGE 3: PLEASE DOWNLOAD SCRIPTS-BOOTLOADER-FOR-ASUS-ROUTER-ADDONS *****\033[0m"
    echo -e "\033[1;41;37m***** STAGE 3: FAILED *****\033[0m"
fi
#
########## END ##########